{"version":3,"sources":["components/TodoList/TodoList.tsx","components/TodoList/TodoListItem.tsx","components/CurrentUser/CurrentUser.tsx","utils/api.ts","App.tsx","index.tsx"],"names":["Status","TodoListItem","todo","setSelectedId","className","classNames","completed","htmlFor","id","type","checked","readOnly","title","onClick","userId","TodoList","state","queryFieldSearch","status","all","handleChange","value","name","setState","filterTodos","query","toLowerCase","props","todos","filter","includes","filterShowStatus","notCompleted","_prevProps","prevState","this","placeholder","onChange","e","target","Object","entries","map","valueStatus","React","Component","CurrentUser","user","clear","email","phone","BASE_URL","request","a","endPoint","fetch","response","json","data","ok","Error","API","App","selectedUserId","then","loadUser","console","log","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8377b5f1.chunk.js","sourcesContent":["import React from 'react';\nimport './TodoList.scss';\nimport { TodoListItem } from './TodoListItem';\n\nenum Status {\n  all = 'All',\n  completed = 'Completed',\n  notCompleted = 'Not completed',\n}\n\ntype Props = {\n  todos: Todo[];\n  setSelectedId: (userId: number) => void;\n};\n\ntype State = {\n  queryFieldSearch: string;\n  status: Status;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    queryFieldSearch: '',\n    status: Status.all,\n  };\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (prevState.status !== this.state.status) {\n      this.filterShowStatus(this.state.status);\n    }\n  }\n\n  handleChange = (value: string, name: string) => {\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  filterTodos = () => {\n    const query = this.state.queryFieldSearch.toLowerCase();\n\n    return this.props.todos.filter(todo => {\n      return todo.title.toLowerCase().includes(query);\n    });\n  };\n\n  filterShowStatus = (status = '') => {\n    switch (status) {\n      case Status.completed:\n        return this.filterTodos().filter(todo => todo.completed);\n\n      case Status.notCompleted:\n        return this.filterTodos().filter(todo => !todo.completed);\n\n      case Status.all:\n      default:\n        return this.filterTodos();\n    }\n  };\n\n  render() {\n    const { setSelectedId } = this.props;\n    const { queryFieldSearch, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__header\">\n          <input\n            name=\"queryFieldSearch\"\n            placeholder=\"filter\"\n            className=\"input\"\n            value={queryFieldSearch}\n            onChange={(e) => {\n              this.handleChange(e.target.value, e.target.name);\n              this.filterTodos();\n            }}\n          />\n\n          <select\n            className=\"select\"\n            name=\"status\"\n            value={status}\n            onChange={(e) => {\n              this.handleChange(e.target.value, e.target.name);\n            }}\n          >\n            {Object.entries(Status).map(valueStatus => (\n              <option\n                key={valueStatus[0]}\n                value={valueStatus[1]}\n              >\n                {valueStatus[1]}\n              </option>\n            ))}\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterShowStatus(status).map(todo => (\n              <TodoListItem\n                key={todo.id}\n                todo={todo}\n                setSelectedId={setSelectedId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import classNames from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  setSelectedId: (userId: number) => void;\n};\n\nexport const TodoListItem: React.FC<Props> = ({ todo, setSelectedId }) => {\n  return (\n    <li\n      key={todo.id}\n      className={classNames('TodoList__item', {\n        'TodoList__item--unchecked': !todo.completed,\n        'TodoList__item--checked': todo.completed,\n      })}\n    >\n      <label htmlFor={`completed_${todo.id}`}>\n        <input\n          id={`completed_${todo.id}`}\n          type=\"checkbox\"\n          checked={todo.completed}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'TodoList__user-button',\n          'button',\n          { 'TodoList__user-button--selected': true },\n        )}\n        type=\"button\"\n        onClick={() => setSelectedId(todo.userId)}\n      >\n        User&nbsp;\n        {todo.userId}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  clear: (id: number) => void;\n};\n\nexport const CurrentUser: React.FC<Props> = ({ user, clear }) => (\n  <div className=\"CurrentUser\">\n    <h2 className=\"CurrentUser__title\">\n      <span>\n        Selected user:&nbsp;\n        {user.id}\n      </span>\n    </h2>\n    <h3 className=\"CurrentUser__name\">{user.name}</h3>\n    <p className=\"CurrentUser__email\">{user.email}</p>\n    <p className=\"CurrentUser__phone\">{user.phone}</p>\n    <button\n      className=\"button\"\n      type=\"button\"\n      onClick={() => clear(0)}\n    >\n      Clear\n    </button>\n  </div>\n);\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endPoint = '') => {\n  const response = await fetch(`${BASE_URL}${endPoint}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error('Error with request');\n  }\n\n  return data;\n};\n\nexport const API = {\n  getTodos: () => request('/todos'),\n  getUserInfo: (userId: number) => request(`/users/${userId}`),\n};\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { API } from './utils/api';\n\ninterface State {\n  selectedUserId: number;\n  todos: Todo[];\n  user: User;\n}\n\ntype Props = {};\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    todos: [],\n    user: {\n      id: 0,\n      email: '',\n      phone: '',\n      name: '',\n    },\n  };\n\n  componentDidMount() {\n    API.getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  componentDidUpdate(_prevProps: Props, prevState: State) {\n    if (prevState.selectedUserId !== this.state.selectedUserId && this.state.selectedUserId !== 0) {\n      this.loadUser();\n      // eslint-disable-next-line no-console\n      console.log('updated');\n    }\n  }\n\n  setSelectedId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  loadUser() {\n    const { selectedUserId } = this.state;\n\n    API.getUserInfo(selectedUserId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { selectedUserId, todos, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList todos={todos} setSelectedId={this.setSelectedId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={user}\n                clear={this.setSelectedId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}