{"version":3,"sources":["types/FilterStatus.ts","utils/api.ts","components/TodoList/TodoListHeader.tsx","components/TodoList/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","BASE_URL","request","a","endPoint","fetch","response","json","data","ok","Error","API","userId","TodoListHeader","this","props","query","status","filterTodos","handleChange","onRandomize","className","name","placeholder","value","onChange","e","target","Object","entries","map","valueStatus","type","onClick","React","PureComponent","TodoListItem","todo","setSelectedId","classNames","completed","htmlFor","id","checked","readOnly","title","TodoList","state","todos","all","setState","toLowerCase","filter","todoTitle","includes","notCompleted","suffeledTodos","i","length","j","Math","floor","random","then","Component","CurrentUser","user","clear","email","phone","App","selectedUserId","_prevProps","prevState","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.93d9eefd.chunk.js","sourcesContent":["export enum Status {\n  all = 'All',\n  completed = 'Completed',\n  notCompleted = 'Not completed',\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endPoint = '') => {\n  const response = await fetch(`${BASE_URL}${endPoint}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error('Error with request');\n  }\n\n  return data;\n};\n\nexport const API = {\n  getTodos: () => request('/todos'),\n  getUserInfo: (userId: number) => request(`/users/${userId}`),\n};\n","import React from 'react';\nimport { Status } from '../../types/FilterStatus';\n\ntype Props = {\n  filterTodos: (status?: Status) => void;\n  handleChange: (value: string, name: string) => void;\n  onRandomize: () => void;\n  query: string,\n  status: Status;\n};\n\nexport class TodoListHeader extends React.PureComponent<Props, {}> {\n  render() {\n    const {\n      query,\n      status,\n      filterTodos,\n      handleChange,\n      onRandomize,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList__header\">\n        <input\n          name=\"query\"\n          placeholder=\"filter\"\n          className=\"input\"\n          value={query}\n          onChange={(e) => {\n            handleChange(e.target.value, e.target.name);\n            filterTodos();\n          }}\n        />\n\n        <select\n          className=\"select\"\n          name=\"status\"\n          value={status}\n          onChange={(e) => {\n            handleChange(e.target.value, e.target.name);\n          }}\n        >\n          {Object.entries(Status).map(valueStatus => (\n            <option\n              key={valueStatus[0]}\n              value={valueStatus[1]}\n            >\n              {valueStatus[1]}\n            </option>\n          ))}\n        </select>\n\n        <button\n          type=\"button\"\n          className=\"button\"\n          onClick={onRandomize}\n        >\n          Randomize\n        </button>\n      </div>\n    );\n  }\n}\n","import classNames from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  setSelectedId: (userId: number) => void;\n};\n\nexport const TodoListItem: React.FC<Props> = ({ todo, setSelectedId }) => {\n  return (\n    <li\n      key={todo.id}\n      className={classNames('TodoList__item', {\n        'TodoList__item--unchecked': !todo.completed,\n        'TodoList__item--checked': todo.completed,\n      })}\n    >\n      <label htmlFor={`completed_${todo.id}`}>\n        <input\n          id={`completed_${todo.id}`}\n          type=\"checkbox\"\n          checked={todo.completed}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'TodoList__user-button',\n          'button',\n          { 'TodoList__user-button--selected': true },\n        )}\n        type=\"button\"\n        onClick={() => setSelectedId(todo.userId)}\n      >\n        User&nbsp;\n        {todo.userId}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport { API } from '../../utils/api';\nimport './TodoList.scss';\nimport { TodoListHeader } from './TodoListHeader';\nimport { TodoListItem } from './TodoListItem';\nimport { Status } from '../../types/FilterStatus';\n\ntype Props = {\n  setSelectedId: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[];\n  query: string;\n  status: Status;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    status: Status.all,\n  };\n\n  componentDidMount() {\n    API.getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  handleChange = (value: string, name: string) => {\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  filterTodos = (status = Status.all) => {\n    const query = this.state.query.toLowerCase();\n\n    return this.state.todos.filter(todo => {\n      const todoTitle = todo.title.toLowerCase();\n\n      switch (status) {\n        case Status.completed:\n          return todoTitle.includes(query) && todo.completed;\n\n        case Status.notCompleted:\n          return todoTitle.includes(query) && !todo.completed;\n\n        case Status.all:\n        default:\n          return todoTitle.includes(query);\n      }\n    });\n  };\n\n  onRandomize = () => {\n    const { todos } = this.state;\n    const suffeledTodos = [...todos];\n\n    for (let i = suffeledTodos.length - 1; i > 0; i -= 1) {\n      const j = Math.floor(Math.random() * (i + 1));\n\n      [suffeledTodos[i], suffeledTodos[j]] = [suffeledTodos[j], suffeledTodos[i]];\n    }\n\n    this.setState({ todos: suffeledTodos });\n  };\n\n  render() {\n    const { setSelectedId } = this.props;\n    const { query, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoListHeader\n          filterTodos={this.filterTodos}\n          query={query}\n          status={status}\n          handleChange={this.handleChange}\n          onRandomize={this.onRandomize}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(status).map(todo => (\n              <TodoListItem\n                key={todo.id}\n                todo={todo}\n                setSelectedId={setSelectedId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  clear: (id: number) => void;\n};\n\nexport class CurrentUser extends React.PureComponent<Props> {\n  render() {\n    const { user, clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => clear(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { API } from './utils/api';\n\ninterface State {\n  selectedUserId: number;\n  user: User;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    user: {\n      id: 0,\n      email: '',\n      phone: '',\n      name: '',\n    },\n  };\n\n  componentDidUpdate(_prevProps: {}, prevState: State) {\n    if (prevState.selectedUserId !== this.state.selectedUserId && this.state.selectedUserId !== 0) {\n      this.loadUser();\n    }\n  }\n\n  setSelectedId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  loadUser() {\n    const { selectedUserId } = this.state;\n\n    API.getUserInfo(selectedUserId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { selectedUserId, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList setSelectedId={this.setSelectedId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={user}\n                clear={this.setSelectedId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}