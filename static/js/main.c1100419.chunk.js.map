{"version":3,"sources":["types/FilterStatus.ts","utils/api.ts","components/TodoList/TodoListHeader.tsx","components/TodoList/TodoListItem.tsx","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","BASE_URL","request","a","endPoint","fetch","response","json","data","ok","Error","API","userId","TodoListHeader","this","props","query","status","filterTodos","handleChange","className","name","placeholder","value","onChange","e","target","Object","entries","map","valueStatus","React","PureComponent","TodoListItem","todo","setSelectedId","classNames","completed","htmlFor","id","type","checked","readOnly","title","onClick","TodoList","state","todos","all","setState","toLowerCase","filter","todoTitle","includes","notCompleted","then","Component","CurrentUser","user","clear","email","phone","App","selectedUserId","_prevProps","prevState","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c1100419.chunk.js","sourcesContent":["export enum Status {\n  all = 'All',\n  completed = 'Completed',\n  notCompleted = 'Not completed',\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endPoint = '') => {\n  const response = await fetch(`${BASE_URL}${endPoint}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error('Error with request');\n  }\n\n  return data;\n};\n\nexport const API = {\n  getTodos: () => request('/todos'),\n  getUserInfo: (userId: number) => request(`/users/${userId}`),\n};\n","import React from 'react';\nimport { Status } from '../../types/FilterStatus';\n\ntype Props = {\n  filterTodos: (status?: Status) => void;\n  handleChange: (value: string, name: string) => void;\n  query: string,\n  status: Status;\n};\n\nexport class TodoListHeader extends React.PureComponent<Props, {}> {\n  render() {\n    const {\n      query,\n      status,\n      filterTodos,\n      handleChange,\n    } = this.props;\n\n    return (\n      <div className=\"TodoList__header\">\n        <input\n          name=\"query\"\n          placeholder=\"filter\"\n          className=\"input\"\n          value={query}\n          onChange={(e) => {\n            handleChange(e.target.value, e.target.name);\n            filterTodos();\n          }}\n        />\n\n        <select\n          className=\"select\"\n          name=\"status\"\n          value={status}\n          onChange={(e) => {\n            handleChange(e.target.value, e.target.name);\n          }}\n        >\n          {Object.entries(Status).map(valueStatus => (\n            <option\n              key={valueStatus[0]}\n              value={valueStatus[1]}\n            >\n              {valueStatus[1]}\n            </option>\n          ))}\n        </select>\n      </div>\n    );\n  }\n}\n","import classNames from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  setSelectedId: (userId: number) => void;\n};\n\nexport const TodoListItem: React.FC<Props> = ({ todo, setSelectedId }) => {\n  return (\n    <li\n      key={todo.id}\n      className={classNames('TodoList__item', {\n        'TodoList__item--unchecked': !todo.completed,\n        'TodoList__item--checked': todo.completed,\n      })}\n    >\n      <label htmlFor={`completed_${todo.id}`}>\n        <input\n          id={`completed_${todo.id}`}\n          type=\"checkbox\"\n          checked={todo.completed}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'TodoList__user-button',\n          'button',\n          { 'TodoList__user-button--selected': true },\n        )}\n        type=\"button\"\n        onClick={() => setSelectedId(todo.userId)}\n      >\n        User&nbsp;\n        {todo.userId}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport { API } from '../../utils/api';\nimport './TodoList.scss';\nimport { TodoListHeader } from './TodoListHeader';\nimport { TodoListItem } from './TodoListItem';\nimport { Status } from '../../types/FilterStatus';\n\ntype Props = {\n  setSelectedId: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[];\n  query: string;\n  status: Status;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    query: '',\n    status: Status.all,\n  };\n\n  componentDidMount() {\n    API.getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  handleChange = (value: string, name: string) => {\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  filterTodos = (status = Status.all) => {\n    const query = this.state.query.toLowerCase();\n\n    return this.state.todos.filter(todo => {\n      const todoTitle = todo.title.toLowerCase();\n\n      switch (status) {\n        case Status.completed:\n          return todoTitle.includes(query) && todo.completed;\n\n        case Status.notCompleted:\n          return todoTitle.includes(query) && !todo.completed;\n\n        case Status.all:\n        default:\n          return todoTitle.includes(query);\n      }\n    });\n  };\n\n  render() {\n    const { setSelectedId } = this.props;\n    const { query, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <TodoListHeader\n          filterTodos={this.filterTodos}\n          query={query}\n          status={status}\n          handleChange={this.handleChange}\n        />\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(status).map(todo => (\n              <TodoListItem\n                key={todo.id}\n                todo={todo}\n                setSelectedId={setSelectedId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  clear: (id: number) => void;\n};\n\nexport class CurrentUser extends React.PureComponent<Props> {\n  render() {\n    const { user, clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => clear(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { API } from './utils/api';\n\ninterface State {\n  selectedUserId: number;\n  user: User;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    user: {\n      id: 0,\n      email: '',\n      phone: '',\n      name: '',\n    },\n  };\n\n  componentDidUpdate(_prevProps: {}, prevState: State) {\n    if (prevState.selectedUserId !== this.state.selectedUserId && this.state.selectedUserId !== 0) {\n      this.loadUser();\n    }\n  }\n\n  setSelectedId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  loadUser() {\n    const { selectedUserId } = this.state;\n\n    API.getUserInfo(selectedUserId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { selectedUserId, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList setSelectedId={this.setSelectedId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={user}\n                clear={this.setSelectedId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}