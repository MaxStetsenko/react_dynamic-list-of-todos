{"version":3,"sources":["components/TodoList/TodoList.tsx","utils/api.ts","components/TodoList/TodoListItem.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["Status","BASE_URL","request","a","endPoint","fetch","response","json","data","ok","Error","API","userId","TodoListItem","todo","setSelectedId","className","classNames","completed","htmlFor","id","type","checked","readOnly","title","onClick","TodoList","state","todos","queryFieldSearch","status","all","handleChange","value","name","setState","filterTodos","query","toLowerCase","filter","todoTitle","includes","notCompleted","then","this","props","placeholder","onChange","e","target","Object","entries","map","valueStatus","React","Component","CurrentUser","user","clear","email","phone","PureComponent","App","selectedUserId","_prevProps","prevState","loadUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.43d54ad3.chunk.js","sourcesContent":["import React from 'react';\nimport { API } from '../../utils/api';\nimport './TodoList.scss';\nimport { TodoListItem } from './TodoListItem';\n\nenum Status {\n  all = 'All',\n  completed = 'Completed',\n  notCompleted = 'Not completed',\n}\n\ntype Props = {\n  setSelectedId: (userId: number) => void;\n};\n\ntype State = {\n  todos: Todo[];\n  queryFieldSearch: string;\n  status: Status;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    todos: [],\n    queryFieldSearch: '',\n    status: Status.all,\n  };\n\n  componentDidMount() {\n    API.getTodos()\n      .then(todos => {\n        this.setState({ todos });\n      });\n  }\n\n  handleChange = (value: string, name: string) => {\n    this.setState((state) => ({\n      ...state,\n      [name]: value,\n    }));\n  };\n\n  filterTodos = (status = Status.all) => {\n    const query = this.state.queryFieldSearch.toLowerCase();\n\n    return this.state.todos.filter(todo => {\n      const todoTitle = todo.title.toLowerCase();\n\n      switch (status) {\n        case Status.completed:\n          return todoTitle.includes(query) && todo.completed;\n\n        case Status.notCompleted:\n          return todoTitle.includes(query) && !todo.completed;\n\n        case Status.all:\n        default:\n          return todoTitle.includes(query);\n      }\n    });\n  };\n\n  render() {\n    const { setSelectedId } = this.props;\n    const { queryFieldSearch, status } = this.state;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n\n        <div className=\"TodoList__header\">\n          <input\n            name=\"queryFieldSearch\"\n            placeholder=\"filter\"\n            className=\"input\"\n            value={queryFieldSearch}\n            onChange={(e) => {\n              this.handleChange(e.target.value, e.target.name);\n              this.filterTodos();\n            }}\n          />\n\n          <select\n            className=\"select\"\n            name=\"status\"\n            value={status}\n            onChange={(e) => {\n              this.handleChange(e.target.value, e.target.name);\n            }}\n          >\n            {Object.entries(Status).map(valueStatus => (\n              <option\n                key={valueStatus[0]}\n                value={valueStatus[1]}\n              >\n                {valueStatus[1]}\n              </option>\n            ))}\n          </select>\n\n          <button\n            type=\"button\"\n            onClick={() => {\n            }}\n          >\n            Randomize\n          </button>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {this.filterTodos(status).map(todo => (\n              <TodoListItem\n                key={todo.id}\n                todo={todo}\n                setSelectedId={setSelectedId}\n              />\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","const BASE_URL = 'https://mate.academy/students-api';\n\nconst request = async (endPoint = '') => {\n  const response = await fetch(`${BASE_URL}${endPoint}`);\n  const data = await response.json();\n\n  if (!response.ok) {\n    throw new Error('Error with request');\n  }\n\n  return data;\n};\n\nexport const API = {\n  getTodos: () => request('/todos'),\n  getUserInfo: (userId: number) => request(`/users/${userId}`),\n};\n","import classNames from 'classnames';\n\ntype Props = {\n  todo: Todo;\n  setSelectedId: (userId: number) => void;\n};\n\nexport const TodoListItem: React.FC<Props> = ({ todo, setSelectedId }) => {\n  return (\n    <li\n      key={todo.id}\n      className={classNames('TodoList__item', {\n        'TodoList__item--unchecked': !todo.completed,\n        'TodoList__item--checked': todo.completed,\n      })}\n    >\n      <label htmlFor={`completed_${todo.id}`}>\n        <input\n          id={`completed_${todo.id}`}\n          type=\"checkbox\"\n          checked={todo.completed}\n          readOnly\n        />\n        <p>{todo.title}</p>\n      </label>\n\n      <button\n        className={classNames(\n          'TodoList__user-button',\n          'button',\n          { 'TodoList__user-button--selected': true },\n        )}\n        type=\"button\"\n        onClick={() => setSelectedId(todo.userId)}\n      >\n        User&nbsp;\n        {todo.userId}\n      </button>\n    </li>\n  );\n};\n","import React from 'react';\nimport './CurrentUser.scss';\n\ntype Props = {\n  user: User;\n  clear: (id: number) => void;\n};\n\nexport class CurrentUser extends React.PureComponent<Props> {\n  render() {\n    const { user, clear } = this.props;\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            Selected user:&nbsp;\n            {user.id}\n          </span>\n        </h2>\n        <h3 className=\"CurrentUser__name\">{user.name}</h3>\n        <p className=\"CurrentUser__email\">{user.email}</p>\n        <p className=\"CurrentUser__phone\">{user.phone}</p>\n        <button\n          className=\"button\"\n          type=\"button\"\n          onClick={() => clear(0)}\n        >\n          Clear\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\nimport { API } from './utils/api';\n\ninterface State {\n  selectedUserId: number;\n  user: User;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n    user: {\n      id: 0,\n      email: '',\n      phone: '',\n      name: '',\n    },\n  };\n\n  componentDidUpdate(_prevProps: {}, prevState: State) {\n    if (prevState.selectedUserId !== this.state.selectedUserId && this.state.selectedUserId !== 0) {\n      this.loadUser();\n    }\n  }\n\n  setSelectedId = (selectedUserId: number) => {\n    this.setState({ selectedUserId });\n  };\n\n  loadUser() {\n    const { selectedUserId } = this.state;\n\n    API.getUserInfo(selectedUserId)\n      .then(user => this.setState({ user }));\n  }\n\n  render() {\n    const { selectedUserId, user } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList setSelectedId={this.setSelectedId} />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                user={user}\n                clear={this.setSelectedId}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}